<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.bigdata.model.mapper.ReviewMapper">

	<!-- ReviewController -->
	<select id="getList" parameterType="map" resultType="ReviewDto">
		select id_review, id_store,id_user,content, nickname, likeCnt, score,
			case when date_format(upload_date, '%Y%m%d') = date_format(now(), '%Y%m%d')
							then date_format(upload_date, '%H:%i:%s')
							else date_format(upload_date, '%y.%m.%d')
							end upload_date,
			case when date_format(update_date, '%Y%m%d') = date_format(now(), '%Y%m%d')
							then date_format(update_date, '%H:%i:%s')
							else date_format(update_date, '%y.%m.%d')
							end update_date				 
		from review r join user
		using(id_user)
		where r.active = 1
		order by id_review desc
		limit 8
	</select>
	
	<select id="getLastReview" parameterType="string" resultType="string">
		select id_review
		from review
		where id_user = #{id_user} and active = 1
		order by update_date desc
		limit 1
	</select>
	
	<select id="getOne" parameterType="int" resultType="ReviewDto">
		select r.id_review as id_review, r.id_store as id_store,  r.content as content, r.score as score, r.upload_date as upload_date, r.update_date as update_date, u.nickname as nickname
		from review r join user u
			using(id_user)
		where id_review = #{id_review} and r.active = 1
	</select>
	
	<insert id="write" parameterType="ReviewDto">
		insert into review (content, id_user, id_store, score, upload_date, update_date)
		values (#{content}, #{id_user}, #{id_store}, #{score}, current_timestamp, current_timestamp)
	</insert>
	
	<update id="modify" parameterType="ReviewDto">
		update review
		set content = #{content}, score = #{score}, update_date = current_timestamp
		where id_review = #{id_review} and active = 1
	</update>
	
	<update id="delete" parameterType="int">
		update review
		set active = 0
		where id_review = #{id_review} and active = 1
	</update>
	
 	<select id="likeCount" parameterType="int" resultType="int">
 		select count(id_review_like)
 		from review_like
 		where id_review = #{id_review} and active = 1
 	</select>
	
	<select id="likeCheck" parameterType="map" resultType="string">
	    select active
	    from review_like
	    where id_review = #{id_review} and id_user = #{id_user};
	</select>
	
	<select id="likeInfo" parameterType="map" resultType="ReviewLikeDto">
	    select id_review_like, id_review, id_user, active
	    from review_like
	    where id_review=#{id_review} and id_user=#{id_user}
	</select>
	
	<insert id="insertLike" parameterType="map">
		insert into review_like(id_review, id_user)
		values (#{id_review}, #{id_user})
	</insert>
	
	<update id="updateLike" parameterType="map">
		update review_like
		set active = 
			case
				when likeCheck = 1 
					then 0
				when likeCheck = 0
					then 1
		where id_review = #{id_review} and id_user = #{id_user}
	</update>
	
	<update id="like" parameterType="map">
		update review_like
		set active = 1
		where id_review = #{id_review} and id_user = #{id_user}
	</update>
	
	<update id="unlike" parameterType="map">
		update review_like
		set active = 0
		where id_review = #{id_review} and id_user = #{id_user}
	</update>
	
	<update id="likeCntUp" parameterType="int">
		update review
		set likeCnt = likeCnt + 1
		where id_review = #{id_review}
	</update>
	
	<update id="likeCntDown" parameterType="int">
		update review
		set likeCnt = likeCnt - 1
		where id_review = #{id_review}
	</update>
	
	<select id="getStoreReviews" parameterType="int" resultType="reviewDto">
 		select id_review, id_user, id_store, store_name, score, content, upload_date, update_date,
 		likeCnt
 		from review as r
 		join store using(id_store)
 		where id_store = #{id_store} and r.active = 1
 		order by upload_date desc
 	</select>
 	
 	<select id="getReviewCount" parameterType="int" resultType="int">
 		select count(*)
		from review
		where id_store = #{id_store} and active = 1
 	</select>
 	
 	<select id="getIdReview" parameterType="String" resultType="String">
 		select id_review
		from review
		where upload_date = #{upload_date} and active = 1
 	</select>
 	
 	<select id="getStoreName" parameterType="int" resultType="String">
 		select store_name
		from store
		where id_store = #{id_store} and active = 1
 	</select>
 	
</mapper>
